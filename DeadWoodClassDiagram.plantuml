@startuml

GameLoop *-- SetupManager
GameLoop *-- SetManager
GameLoop *-- MoveManager
GameLoop *-- ScoringManager
GameLoop *-- CastingManager
GameLoop *-- UI
GameLoop o-- Player

SetupManager --> ParseXML
SetupManager o-- Set
SetupManager o-- Room
SetupManager o-- Scene
SetupManager --> Player
SetupManager --> SetManager

' SetManager --> Set
' SetManager --> Player
' SetManager --> Role

' MoveManager --> Player
' MoveManager --> Room

' CastingManager --> Player

' ScoringManager --> Player

Set o-- Scene
Set o-- Role

Scene o-- Role

Set --|> Room
Office --|> Room
Trailer --|> Room

class GameLoop {
    - setupManager : SetupManager
    - setManager : SetManager
    - moveManager MoveManager
    - scoringManager : ScoringManager
    - ui : UI
    - castingManager : CastingManager
    - players : Player[]
    - numPlayers : int
    - currPlayer : Player
    - turnOver : boolean
    - dayOver : boolean
    - gameOver : boolean

    + GameLoop() : 
    + runGame (numPlayers : int) :
    - gameLoop (numPlayers : int) :
    - dayLoop() :
    - turnLoop() :
    - chooseMove (player : Player) :
    - chooseRole (player : Player) :
    - chooseAct (player : Player) :
    - chooseRehearse (player : Player) :
    - chooseUpgrade (player : Player) :
    - chooseEndTurn() :
    - getActionsOf (player : Player) : String[]
    - print (string : String) :
    - turnSort ( a : Player[] ) :
}

class SetupManager {
    - setbank : ArrayList<Set>
    - areabank : Hashtable<String, Room>
    - scenebank : ArrayList<Scene>
    - sceneOrder : Integer[]

    + SetupManager() :
    ~ initializeGame() :
    - resetPlayers() :
    - distributeScenes() :
    ~ setupPlayers (num : int) : Player[]
    + constructPieces()
}

class SetManager {
    - wrapCount : int
    
    ~ assignRoleTo (player : Player, role : Role) :
    ~ getRoles (set : Set) : Role[]
    ~ itsAWrap (player : Player) :
    ~ getWrapCount() : int
    ~ getRoleOptions (player: Player) : Role[]
    ~ rolesAsStrings (roles : Role[]) : String[]
}

class UI {
    - prompt (descriptor : String, actions : String[]) : String
    + handlePlayerAction (descriptor : String, options : String[])
    - findIndex (arr : String[], t : String) : int
    - isInt (strNum : String) : boolean
    - asInt (strNum : String) : int
    - clamp (val : int, min : int, max : int) : int 
}

class MoveManager {
    ~ move (player : Player, room : Room)
    ~ getMoveOptions (player : Player) : Room[]
    ~ roomsAsString (room : Room) : String[]
}

class ScoringManager {
    ~ scoreGame (players : Player[]) : ArrayList<Player>
    ~ endScoring (finalList : ArrayList<Player>) :
}

class CastingManager {
    - optionInts : int[]
    - optionStrings : String[]
    - dollarPrices : int[]
    - creditPrices : int[]

    ~ setRankOf (player: Player, rank: int) :
    ~ getRankOptions (player: Player) : int[]
    ~ getRankStrings (player: Player) : String[]
}

class ParseXML {
    ~ getDocFromFile (filename : String) : Document
    ~ parseSceneCards (d: Document, scenbank: ArrayList<Scene>) :
    ~ parseBoard (d: Document, setbank: ArrayList<Set>, roombank: Hashtable<String, Room>) :
    - parseTrailer(rootElement: Node, roombank: Hashtable<String, Room>) :
    - parseOffice(rootElement: Node, roombank: Hashtable<String, Room>) :
    - parseSet(rootElement: Node, setbank: ArrayList<Set>, roombank: Hashtable<String, Room>) :
    - parseUpgrades(rootElement: Node, finalUpgrades: ArrayList<Upgrade>) :
    - parseNeighbors(rootElement: Node, finalNeighbors: ArrayList<String>) :
    - parseTakes(rootElement: Node, takeNums: ArrayList<Integer>, takeAreas: ArrayList<Rectangle>) :
    - parseRoles(rootElement: Node, finalRoles: ArrayList<Role>) :
    - parseRole(rootElement: Node, parts: ArrayList<Role>) :
    - parseArea(rootElement: Node, area: Rectangle) :
    - parseStringAttribute(rootElement: Node, itemName: String) :
    - parseIntegerAttribute(rootElement: Node, itemName: String) :
}

class UIAction {
    ~ type : String
    ~ index : int

    ~ UIAction(type: String, index: int) : UIAction
}

class Room {
    ~ name : String
    ~ defaultNeighbors : ArrayList<String>
    ~ connectedRooms : ArrayList<Room>
    ~ area : Rectangle
    ~ playerList : ArrayList<Player>
}

class Office {
    ~ upgrades : ArrayList<Upgrade>
    
    ~ Office (defaultNeighbors: ArrayList<String>, area: Rectangle, upgrades: ArrayList<Upgrade>) : Office
}

class Trailer {
    ~ Trailer (defaultNeighbors: ArrayList<String>, area: Rectangle) : Trailer
}

class Set {
    - takeNums : ArrayList<Integer>
    - takeAreas : ArrayList<Rectangle>
    - extraRoles : ArrayList<Role>
    - maxShots : int
    - scene : Scene
    - shotCounters : int

    ~ Set (name: String, neighborStrings: ArrayList<String>, area: Rectangle, takeNums: ArrayList<Integer>, takeAreas: ArrayList<Rectangle>, parts: ArrayList<Role>) : Set
    ~ setScene (scene: Scene) :
    ~ getScene() : Scene
    ~ getRoles() : Role[]
    ~ addPlayer (player: Player) :
    ~ payOut (player: Player, budget: int, numRoles: int, pos: int) :
    ~ act (player: Player, budget: int) : boolean
    ~ rehearse (player: Player) :
    ~ handleDice (player: Player, numDice: int) : ArrayList<Integer>
    - bubbleSort (a: ArrayList<Integer>) :
}

class Upgrade {
    ~ level : int
    ~ currency : String
    ~ amount : int
    ~ area : Rectangle

    + Upgrade (level: int, currency: String, amount: int, area: Rectangle) : Upgrade
}

class Scene {
    ~ name : String
    ~ img : String
    ~ budget : int
    ~ number : int
    ~ description : String
    - roles : ArrayList<Role>

    ~ Scene (name: String, img: String, budget: int, number: int, description: String, parts: ArrayList<Role>) : Scene
    ~ getRoles() : Role[]
}

class Role {
    ~ name : String
    - line : String
    - rank : int
    ~ area : Rectangle

    ~ Role (name: String, line: String, level: int, area: Rectangle) : Role
    ~ getRank() : int
}

class Player {
    ~ practiceTokens : int
    ~ finalScore : int
    ~ name : String
    ~ rank : int
    ~ dollars : int
    ~ credits : int
    ~ turnNo : int
    ~ scene : String
    ~ currentRoom : Room
    ~ working : boolean

    ~ Player (name: String) : Player
    ~ addDollars (amount: int) :
    ~ subDollars (amount: int) :
    ~ addCredits (amount: int) :
    ~ subCredits (amount: int) :
}

@enduml